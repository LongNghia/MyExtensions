#!/usr/bin/python3 

# Note that running python with the `-u` flag is required on Windows,
# in order to ensure that stdin and stdout are opened in binary, rather
# than text, mode.

import json
import sys
import struct
import subprocess

# redirect

# Read a message from stdin and decode it.

PATH =  "/mnt/01D7FA0FB6446CB0/scripts/MyUserScripts/"
f = open("log.txt", "a")

def get_message():
    raw_length = sys.stdin.buffer.read(4)
    if not raw_length:
        sys.exit(0)
    message_length = struct.unpack('=I', raw_length)[0]
    message = sys.stdin.buffer.read(message_length).decode("utf-8")
    f.write(json.loads(message)["text"]+'\n')
    return json.loads(message)

# Encode a message for transmission, given its content.


def encode_message(message_content,message_action="info"):
    try:
        encoded_content = json.dumps(message_content).encode("utf-8")
        encoded_length = struct.pack('=I', len(encoded_content))
        #  use struct.pack("10s", bytes), to pack a string of the length of 10 characters
        return {'action':message_action,'length': encoded_length, 'content': struct.pack(str(len(encoded_content))+"s", encoded_content)}
    except:
        message_content="error at encode_message"
        encode_message(message_content)

# Send an encoded message to stdout.


def send_message(encoded_message):
    sys.stdout.buffer.write(encoded_message['length'])
    sys.stdout.buffer.write(encoded_message['content'])
    sys.stdout.buffer.flush()


while True:
    message = get_message()
    # if message == "ping":
    #     send_message(encode_message("pong"))

    # # send_message(encode_message(message))
    # if message["text"].startswith("gedit"):
    #     send_message(encode_message("pong!"))
    #     subprocess.run(["gedit"])

    # if message["text"].startswith("ls"):
    #     # p = subprocess.Popen(message["text"].split(), stdout=subprocess.PIPE)
    #     # out, err = p.communicate()
    #     # out = subprocess.check_output(message["text"].split())
    #     out = subprocess.check_output(["ls","/mnt/01D7FA0FB6446CB0/scripts/MyUserScripts/"])
        
    #     send_message(encode_message(out.decode('utf-8')))
    # else:
    #     send_message(encode_message("received!"))

    try:
        out = subprocess.check_output(message["text"].split())
        send_message(encode_message(out.decode('utf-8')))
    except:
        f.close()
        send_message(encode_message("Error!"))




